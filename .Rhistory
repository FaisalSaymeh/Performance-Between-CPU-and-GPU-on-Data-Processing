my_colors2 <- c("AMD" = "#ff4d00","Intel" = "#1f77b4","NVIDIA"="#2ca02c")
ggplot(visualization_data2, aes(x = Year, y = AvgFrequency, color = Company)) +
geom_line() +
geom_point() +
scale_color_manual(values = my_colors2)+
facet_wrap(~Type)+
labs(title = "Average Frequency (GHz) Over the Years by Company",
x = "Year", y = "Average Frequency (GHz)") +
theme_minimal() +
theme(legend.position = "bottom")+theme_gray() +theme(plot.title = element_text(hjust = 1))
data <- read.csv("chip_dataset.csv")
data_befor = data
head(data.frame(data_befor))
library(dplyr)
library(tidyr)
library(plotly)
library(ggplot2)
library(data.table)
#library(grid)
library(lubridate)
data.frame(summary(data))
# To calculate the number of missing values in every column.
data.frame(colSums(is.na(data)))
data <- select(data, -X,-Foundry,-FP16.GFLOPS,-FP32.GFLOPS,-FP64.GFLOPS)
head(data)
colnames(data) <- c("Product","Type", "Release Date", "Process Size (nm)", "TDP (W)", "Die Size (mm^2)", "Transistors (million)", "Frequency (GHz)", "Company")
head(data)
# Changing from Mega to Giga / 1 GHZ = 1000 MHZ
data$`Frequency (GHz)` <- round(data$`Frequency (GHz)` / 1000,1)
# To calculate the number of missing values in every column agian.
data.frame(colSums(is.na(data)))
# Take the average of TDP (W) grouped by Type and put it in a variable.
TDP_AVG = data %>% group_by(Type) %>% summarise(avg_tdp = mean(`TDP (W)`, na.rm = TRUE))
TDP_AVG
# Create variable to take the CPU (TDP (W)) average only.
cpu_tdp = TDP_AVG %>% filter(Type == "CPU") %>% pull
cpu_tdp
# Create variable to take the GPU (TDP (W)) average only.
gpu_tdp = TDP_AVG %>% filter(Type == "GPU") %>% pull
gpu_tdp
# Replace missing values with the group mean (TDP (W)) of each type of processor.
data = data %>% mutate(`TDP (W)` = ifelse(is.na(`TDP (W)`) & Type =='CPU', cpu_tdp, ifelse(is.na(`TDP (W)`) & Type =='GPU', gpu_tdp , `TDP (W)`)))
# Check the missing value for the column TDP (W) again.
data.frame(colSums(is.na(data)))
# Take the average of Die Size (mm^2) grouped by Type and put it in a variable.
Die_AVG = data %>% group_by(Type) %>% summarise(avg_die = mean(`Die Size (mm^2)`, na.rm = TRUE))
Die_AVG
# Create variable to take the CPU (Die Size (mm^2)) average only.
cpu_die = Die_AVG %>% filter(Type == "CPU") %>% pull
cpu_die
# Create variable to take the GPU Die Size (mm^2) average only.
gpu_die = Die_AVG %>% filter(Type == "GPU") %>% pull
gpu_die
# Replace missing values with the group mean (Die Size (mm^2)) of each type of processor
data = data %>% mutate(`Die Size (mm^2)` = ifelse(is.na(`Die Size (mm^2)`) & Type =='CPU', cpu_die,ifelse(is.na(`Die Size (mm^2)`) & Type =='GPU', gpu_die , `Die Size (mm^2)`)))
# Check the missing value for the column Die Size (mm^2) again
data.frame(colSums(is.na(data)))
# Take the average of Transistors (million) grouped by Type and put it in a variable.
TS_AVG = data %>% group_by(Type) %>% summarise(avg_ts = mean(`Transistors (million)`, na.rm = TRUE))
TS_AVG
# Create variable to take the CPU (Transistors (million)) average only.
cpu_ts = TS_AVG %>% filter(Type == "CPU") %>% pull
cpu_ts
# Create variable to take the GPU (Transistors (million)) average only.
gpu_ts = TS_AVG %>% filter(Type == "GPU") %>% pull
gpu_ts
# Replace missing values with the group mean (Transistors (million)) of each type of processor
data = data %>% mutate(`Transistors (million)` = ifelse(is.na(`Transistors (million)`) & Type =='CPU', cpu_ts, ifelse(is.na(`Transistors (million)`) & Type =='GPU', gpu_ts , `Transistors (million)`)))
# Check the missing value for the column Transistors (million) again
data.frame(colSums(is.na(data)))
data <- data %>% drop_na()
data.frame(colSums(is.na(data)))
str(data)
data <- data %>% mutate(`Release Date` = as.Date(`Release Date`,format = c("%m/%d/%Y")))
# Check again all the formats
str(data)
# Check NA
data.frame(colSums(is.na(data)))
data <- data %>% drop_na()
data.frame(colSums(data==0))
# Viewing the product that has zero processor
subset(data,data$`Process Size (nm)` == 0)
data <- subset(data, data$`Process Size (nm)` !=0)
data['Transistor Density']<- round((data['Transistors (million)'] * 1000000) / data['Die Size (mm^2)'], 2)
# Viewing the data after Data Cleaning and Processing
data_after = data
head(data.frame(data_after))
data_for_plot =  data %>% count(Type,name="Count")
legend_labels <- paste(names(data_for_plot$Count),data_for_plot$Type ,": ", data_for_plot$Count)
legend_labels
custom_colors <- c("#ffa500", "#0a75ad")
plot_ly(data_for_plot, labels = ~Type, values = ~Count, type = 'pie',textinfo = 'label+percent', insidetextorientation = 'radial',marker = list(colors = custom_colors)) %>%  layout(title = list(text = "CPU vs GPU Count Unit", x = 0.5,y = 0.98))
result <- data %>%
count(Year = as.numeric(format(`Release Date`, '%Y')), `Process Size (nm)`, Type) %>%
group_by(Year, Type) %>%
summarize(mean_count = mean(`Process Size (nm)`))
ggplot(result, aes(x =Year, y = mean_count, color = Type)) +
geom_point() +
geom_line()+
scale_color_manual(values = c("#0a75ad","#ff4040")) +
scale_x_continuous(
breaks=c(2000,2002,2004,2006,2008,2010,2012,2014,2016,2018,2020),labels=c(2000,2002,2004,2006,2008,2010,2012,2014,2016,2018,2020))+
scale_y_continuous(
breaks=c(20,40,60,80,100,120,140,160,180,200),labels=c(20,40,60,80,100,120,140,160,180,200))+
labs(title = " Average Process Size (nm) Over Years", x = "Release Date", y = "Process Size (nm)")+
theme(plot.title = element_text(hjust = 0.6))
result2 <- data %>%
count(Year = as.numeric(format(`Release Date`, '%Y')), `Transistors (million)`, Type) %>%
group_by(Year, Type) %>%
summarize(mean_count = mean(`Transistors (million)`))
ggplot(result2, aes(x =Year, y = mean_count, color = Type)) +
geom_point() +
geom_line()+
scale_color_manual(values = c("#0a75ad","#ff4040")) +
scale_x_continuous(
breaks=c(2000,2002,2004,2006,2008,2010,2012,2014,2016,2018,2020),labels=c(2000,2002,2004,2006,2008,2010,2012,2014,2016,2018,2020))+
scale_y_continuous(
breaks=c(1000,2500,5000,7500,10000,12500,15000,17000),labels=c(1000,2500,5000,7500,10000,12500,15000,17000))+
labs(title = " Average Transistors (million) Over Years", x = "Release Date", y = "Transistors (million)")+
theme(plot.title = element_text(hjust = 0.6))
result3 <- data %>%
count(Year = as.numeric(format(`Release Date`, '%Y')), `Frequency (GHz)`, Type) %>%
group_by(Year, Type) %>%
summarize(mean_count = mean(`Frequency (GHz)`))
ggplot(result3, aes(x =Year, y = mean_count, color = Type)) +
geom_point() +
geom_line()+
scale_color_manual(values = c("#0a75ad","#ff4040")) +
scale_x_continuous(
breaks=c(2000,2002,2004,2006,2008,2010,2012,2014,2016,2018,2020),labels=c(2000,2002,2004,2006,2008,2010,2012,2014,2016,2018,2020))+
labs(title = " Average Frequency (GHz) Over Years", x = "Release Date", y = "Frequency (GHz)")+
theme(plot.title = element_text(hjust = 0.6))
result4 <- data %>%
count(Year = as.numeric(format(`Release Date`, '%Y')), `Die Size (mm^2)`, Type) %>%
group_by(Year, Type) %>%
summarize(mean_count = mean(`Die Size (mm^2)`))
ggplot(result4, aes(x =Year, y = mean_count, color = Type)) +
geom_point() +
geom_line()+
scale_color_manual(values = c("#0a75ad","#ff4040")) +
scale_x_continuous(
breaks=c(2000,2002,2004,2006,2008,2010,2012,2014,2016,2018,2020),labels=c(2000,2002,2004,2006,2008,2010,2012,2014,2016,2018,2020))+
scale_y_continuous(
breaks=c(100,150,200,250,300,350,400),labels=c(100,150,200,250,300,350,400))+
labs(title = " Average Die Size (mm^2) Over Years", x = "Release Date", y = "Die Size (mm^2)") +
theme(plot.title = element_text(hjust = 0.6))
result5 <- data %>%
count(Year = as.numeric(format(`Release Date`, '%Y')), `TDP (W)`, Type) %>%
group_by(Year, Type) %>%
summarize(mean_count = mean(`TDP (W)`))
ggplot(result5, aes(x =Year, y = mean_count, color = Type)) +
geom_point() +
geom_line()+
scale_color_manual(values = c("#0a75ad","#ff4040")) +
scale_x_continuous(
breaks=c(2000,2002,2004,2006,2008,2010,2012,2014,2016,2018,2020),labels=c(2000,2002,2004,2006,2008,2010,2012,2014,2016,2018,2020))+
scale_y_continuous(
breaks=c(30,60,90,120,150,170),labels=c(30,60,90,120,150,170))+
labs(title = " Average TDP (W) Over Years", x = "Release Date", y = "TDP (W)")+
theme(plot.title = element_text(hjust = 0.6))
result6 <- data %>%
count(Year = as.numeric(format(`Release Date`, '%Y')), `Transistor Density`, Type, `TDP (W)`, `Frequency (GHz)`) %>%
group_by(Year, Type) %>%
summarize(
mean_transistor_density = mean(`Transistor Density`),
mean_TDP_W = mean(`TDP (W)`),
mean_frequency_GHz = mean(`Frequency (GHz)`)
)
ggplot(result6, aes(x = Year, y = mean_transistor_density/1000000, color = mean_TDP_W, size = mean_frequency_GHz)) +
geom_point(alpha = 0.7) +
facet_wrap(~Type) +
scale_color_gradient(low = "blue", high = "red", guide = guide_legend(override.aes = list(size = 4))) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Average Transistor Density, Frequency (GHz) and TDP (W) Over Time by Type",
x = "Year",
y = "Average Transistor Density (million)",
color = "Average TDP (W)",
size = "Average Frequency (GHz)") +
guides(size = guide_legend("Average Frequency (GHz)")) +
theme_gray() +
theme(legend.position = "bottom",
legend.text = element_text(size = 14),
legend.title = element_text(size = 16))+
theme(plot.title = element_text(hjust = 0.5))
result7 <- data %>%
filter(`Frequency (GHz)` == 2.3 | `Frequency (GHz)` == 2.2) %>%
count(Year = as.numeric(format(`Release Date`, '%Y')), `Transistor Density`, Type, `TDP (W)`, `Frequency (GHz)`) %>%
group_by(Year, Type) %>%
summarize(
mean_transistor_density = mean(`Transistor Density`),
mean_TDP_W = mean(`TDP (W)`),
mean_frequency_GHz = mean(`Frequency (GHz)`)
)
ggplot(result7, aes(x = Year, y = mean_transistor_density/1000000, color = mean_TDP_W, size = mean_frequency_GHz)) +
geom_point(alpha = 0.7) +
facet_wrap(~Type) +
scale_color_gradient(low = "blue", high = "red", guide = guide_legend(override.aes = list(size = 5))) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Average Transistor Density, Frequency (GHz) and TDP (W) Over Time by Type",
x = "Year",
y = "Average Transistor Density (million)",
color = "Average TDP (W)",
size = "Average Frequency (GHz)") +
guides(size = guide_legend("Average Frequency (GHz)")) +
theme_gray() +
theme(legend.position = "bottom",
legend.text = element_text(size = 10),
legend.title = element_text(size = 16))+
theme(plot.title = element_text(hjust = 0.5))
data_for_plot2 =  data %>% count(Type,Company,name="Count")
ggplot(data_for_plot2,aes(x=Company, y=Count,fill= Type),fill = Type) +
geom_text(aes(label = Count),position = position_dodge(1), vjust = -0.5, size = 3) +
geom_bar(position='dodge', stat="identity") +
scale_y_continuous(
breaks=c(500,1000,1500),labels=c(500,1000,1500)) +
scale_fill_manual(values=c("#ffa500", "#0a75ad"),labels = legend_labels)+
labs(title = "CPU and GPU Count between Companies") +
theme_classic() +
theme(legend.position = "right", plot.title = element_text(hjust = 1))
data$Year <- year(ymd(data$`Release Date`))
visualization_data1 <- data %>%
group_by(Year, Company, Type) %>%
summarize(Count = n(), .groups = 'drop')
my_colors1 <- c("AMD" = "#ff4d00", "ATI" = "#e10000", "Intel" = "#1f77b4","NVIDIA"="#2ca02c" ,"Other"="#660066")
ggplot(visualization_data1, aes(x = Year, y = Count, fill = Company)) +
geom_area() +
facet_wrap(~Type)+
scale_fill_manual(values = my_colors1) +
labs(title = "Distribution of Product Types by Company Over the Years",
x = "Year", y = "Number of Products Released") +
theme_minimal() + theme_gray()+ theme(plot.title = element_text(hjust = 1))
filtered_data <- data %>%
filter(Company %in% c("Intel", "NVIDIA", "AMD"))
visualization_data2 <- filtered_data %>%
group_by(Year, Company,Type) %>%
summarize(AvgFrequency = mean(`Frequency (GHz)`, na.rm = TRUE), .groups = 'drop')
my_colors2 <- c("AMD" = "#ff4d00","Intel" = "#1f77b4","NVIDIA"="#2ca02c")
ggplot(visualization_data2, aes(x = Year, y = AvgFrequency, color = Company)) +
geom_line() +
geom_point() +
scale_color_manual(values = my_colors2)+
facet_wrap(~Type)+
labs(title = "Average Frequency (GHz) Over the Years by Company",
x = "Year", y = "Average Frequency (GHz)") +
theme_minimal() +
theme(legend.position = "bottom")+theme_gray() +theme(plot.title = element_text(hjust = 1))
visualization_data3 <- filtered_data %>%
group_by(Year, Company,Type) %>%
summarize(AvgTransistorDensity = mean(`Transistor Density`/1000000, na.rm = TRUE), .groups = 'drop')
ggplot(visualization_data3, aes(x = Year, y = AvgTransistorDensity, color = Company)) +
geom_line() +
geom_point()+
scale_color_manual(values = my_colors2)+
facet_wrap(~Type)+
labs(title = "Average Transistor Density Over the Years by Company",
x = "Year", y = "Average Transistor Density (million)") +
theme_minimal() +
theme(legend.position = "bottom") + theme_gray() + theme(plot.title = element_text(hjust = 1))
View(data_for_plot)
View(data)
data <- read.csv("chip_dataset.csv")
data_befor = data
head(data.frame(data_befor))
library(dplyr)
library(tidyr)
library(plotly)
library(ggplot2)
library(data.table)
library(grid)
library(lubridate)
data.frame(summary(data))
# To calculate the number of missing values in every column.
data.frame(colSums(is.na(data)))
data <- select(data, -X,-Foundry,-FP16.GFLOPS,-FP32.GFLOPS,-FP64.GFLOPS)
head(data)
colnames(data) <- c("Product","Type", "Release Date", "Process Size (nm)", "TDP (W)", "Die Size (mm^2)", "Transistors (million)", "Frequency (GHz)", "Company")
head(data)
# Changing from Mega to Giga / 1 GHZ = 1000 MHZ
data$`Frequency (GHz)` <- round(data$`Frequency (GHz)` / 1000,1)
# To calculate the number of missing values in every column agian.
data.frame(colSums(is.na(data)))
# Take the average of TDP (W) grouped by Type and put it in a variable.
TDP_AVG = data %>% group_by(Type) %>% summarise(avg_tdp = mean(`TDP (W)`, na.rm = TRUE))
TDP_AVG
# Create variable to take the CPU (TDP (W)) average only.
cpu_tdp = TDP_AVG %>% filter(Type == "CPU") %>% pull
cpu_tdp
# Create variable to take the GPU (TDP (W)) average only.
gpu_tdp = TDP_AVG %>% filter(Type == "GPU") %>% pull
gpu_tdp
# Replace missing values with the group mean (TDP (W)) of each type of processor.
data = data %>% mutate(`TDP (W)` = ifelse(is.na(`TDP (W)`) & Type =='CPU', cpu_tdp, ifelse(is.na(`TDP (W)`) & Type =='GPU', gpu_tdp , `TDP (W)`)))
# Check the missing value for the column TDP (W) again.
data.frame(colSums(is.na(data)))
# Take the average of Die Size (mm^2) grouped by Type and put it in a variable.
Die_AVG = data %>% group_by(Type) %>% summarise(avg_die = mean(`Die Size (mm^2)`, na.rm = TRUE))
Die_AVG
# Create variable to take the CPU (Die Size (mm^2)) average only.
cpu_die = Die_AVG %>% filter(Type == "CPU") %>% pull
cpu_die
# Create variable to take the GPU Die Size (mm^2) average only.
gpu_die = Die_AVG %>% filter(Type == "GPU") %>% pull
gpu_die
# Replace missing values with the group mean (Die Size (mm^2)) of each type of processor
data = data %>% mutate(`Die Size (mm^2)` = ifelse(is.na(`Die Size (mm^2)`) & Type =='CPU', cpu_die,ifelse(is.na(`Die Size (mm^2)`) & Type =='GPU', gpu_die , `Die Size (mm^2)`)))
# Check the missing value for the column Die Size (mm^2) again
data.frame(colSums(is.na(data)))
# Take the average of Transistors (million) grouped by Type and put it in a variable.
TS_AVG = data %>% group_by(Type) %>% summarise(avg_ts = mean(`Transistors (million)`, na.rm = TRUE))
TS_AVG
# Create variable to take the CPU (Transistors (million)) average only.
cpu_ts = TS_AVG %>% filter(Type == "CPU") %>% pull
cpu_ts
# Create variable to take the GPU (Transistors (million)) average only.
gpu_ts = TS_AVG %>% filter(Type == "GPU") %>% pull
gpu_ts
# Replace missing values with the group mean (Transistors (million)) of each type of processor
data = data %>% mutate(`Transistors (million)` = ifelse(is.na(`Transistors (million)`) & Type =='CPU', cpu_ts, ifelse(is.na(`Transistors (million)`) & Type =='GPU', gpu_ts , `Transistors (million)`)))
# Check the missing value for the column Transistors (million) again
data.frame(colSums(is.na(data)))
data <- data %>% drop_na()
data.frame(colSums(is.na(data)))
str(data)
data <- data %>% mutate(`Release Date` = as.Date(`Release Date`,format = c("%m/%d/%Y")))
# Check again all the formats
str(data)
# Check NA
data.frame(colSums(is.na(data)))
data <- data %>% drop_na()
data.frame(colSums(data==0))
# Viewing the product that has zero processor
subset(data,data$`Process Size (nm)` == 0)
data <- subset(data, data$`Process Size (nm)` !=0)
data['Transistor Density']<- round((data['Transistors (million)'] * 1000000) / data['Die Size (mm^2)'], 2)
# Viewing the data after Data Cleaning and Processing
data_after = data
head(data.frame(data_after))
data_for_plot =  data %>% count(Type,name="Count")
legend_labels <- paste(names(data_for_plot$Count),data_for_plot$Type ,": ", data_for_plot$Count)
legend_labels
custom_colors <- c("#ffa500", "#0a75ad")
plot_ly(data_for_plot, labels = ~Type, values = ~Count, type = 'pie',textinfo = 'label+percent', insidetextorientation = 'radial',marker = list(colors = custom_colors)) %>%  layout(title = list(text = "CPU vs GPU Count Unit", x = 0.5,y = 0.98))
result <- data %>%
count(Year = as.numeric(format(`Release Date`, '%Y')), `Process Size (nm)`, Type) %>%
group_by(Year, Type) %>%
summarize(mean_count = mean(`Process Size (nm)`))
ggplot(result, aes(x =Year, y = mean_count, color = Type)) +
geom_point() +
geom_line()+
scale_color_manual(values = c("#0a75ad","#ff4040")) +
scale_x_continuous(
breaks=c(2000,2002,2004,2006,2008,2010,2012,2014,2016,2018,2020),labels=c(2000,2002,2004,2006,2008,2010,2012,2014,2016,2018,2020))+
scale_y_continuous(
breaks=c(20,40,60,80,100,120,140,160,180,200),labels=c(20,40,60,80,100,120,140,160,180,200))+
labs(title = " Average Process Size (nm) Over Years", x = "Release Date", y = "Process Size (nm)")+
theme(plot.title = element_text(hjust = 0.6))
result2 <- data %>%
count(Year = as.numeric(format(`Release Date`, '%Y')), `Transistors (million)`, Type) %>%
group_by(Year, Type) %>%
summarize(mean_count = mean(`Transistors (million)`))
ggplot(result2, aes(x =Year, y = mean_count, color = Type)) +
geom_point() +
geom_line()+
scale_color_manual(values = c("#0a75ad","#ff4040")) +
scale_x_continuous(
breaks=c(2000,2002,2004,2006,2008,2010,2012,2014,2016,2018,2020),labels=c(2000,2002,2004,2006,2008,2010,2012,2014,2016,2018,2020))+
scale_y_continuous(
breaks=c(1000,2500,5000,7500,10000,12500,15000,17000),labels=c(1000,2500,5000,7500,10000,12500,15000,17000))+
labs(title = " Average Transistors (million) Over Years", x = "Release Date", y = "Transistors (million)")+
theme(plot.title = element_text(hjust = 0.6))
result3 <- data %>%
count(Year = as.numeric(format(`Release Date`, '%Y')), `Frequency (GHz)`, Type) %>%
group_by(Year, Type) %>%
summarize(mean_count = mean(`Frequency (GHz)`))
ggplot(result3, aes(x =Year, y = mean_count, color = Type)) +
geom_point() +
geom_line()+
scale_color_manual(values = c("#0a75ad","#ff4040")) +
scale_x_continuous(
breaks=c(2000,2002,2004,2006,2008,2010,2012,2014,2016,2018,2020),labels=c(2000,2002,2004,2006,2008,2010,2012,2014,2016,2018,2020))+
labs(title = " Average Frequency (GHz) Over Years", x = "Release Date", y = "Frequency (GHz)")+
theme(plot.title = element_text(hjust = 0.6))
result4 <- data %>%
count(Year = as.numeric(format(`Release Date`, '%Y')), `Die Size (mm^2)`, Type) %>%
group_by(Year, Type) %>%
summarize(mean_count = mean(`Die Size (mm^2)`))
ggplot(result4, aes(x =Year, y = mean_count, color = Type)) +
geom_point() +
geom_line()+
scale_color_manual(values = c("#0a75ad","#ff4040")) +
scale_x_continuous(
breaks=c(2000,2002,2004,2006,2008,2010,2012,2014,2016,2018,2020),labels=c(2000,2002,2004,2006,2008,2010,2012,2014,2016,2018,2020))+
scale_y_continuous(
breaks=c(100,150,200,250,300,350,400),labels=c(100,150,200,250,300,350,400))+
labs(title = " Average Die Size (mm^2) Over Years", x = "Release Date", y = "Die Size (mm^2)") +
theme(plot.title = element_text(hjust = 0.6))
result5 <- data %>%
count(Year = as.numeric(format(`Release Date`, '%Y')), `TDP (W)`, Type) %>%
group_by(Year, Type) %>%
summarize(mean_count = mean(`TDP (W)`))
ggplot(result5, aes(x =Year, y = mean_count, color = Type)) +
geom_point() +
geom_line()+
scale_color_manual(values = c("#0a75ad","#ff4040")) +
scale_x_continuous(
breaks=c(2000,2002,2004,2006,2008,2010,2012,2014,2016,2018,2020),labels=c(2000,2002,2004,2006,2008,2010,2012,2014,2016,2018,2020))+
scale_y_continuous(
breaks=c(30,60,90,120,150,170),labels=c(30,60,90,120,150,170))+
labs(title = " Average TDP (W) Over Years", x = "Release Date", y = "TDP (W)")+
theme(plot.title = element_text(hjust = 0.6))
result6 <- data %>%
count(Year = as.numeric(format(`Release Date`, '%Y')), `Transistor Density`, Type, `TDP (W)`, `Frequency (GHz)`) %>%
group_by(Year, Type) %>%
summarize(
mean_transistor_density = mean(`Transistor Density`),
mean_TDP_W = mean(`TDP (W)`),
mean_frequency_GHz = mean(`Frequency (GHz)`)
)
ggplot(result6, aes(x = Year, y = mean_transistor_density/1000000, color = mean_TDP_W, size = mean_frequency_GHz)) +
geom_point(alpha = 0.7) +
facet_wrap(~Type) +
scale_color_gradient(low = "blue", high = "red", guide = guide_legend(override.aes = list(size = 4))) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Average Transistor Density, Frequency (GHz) and TDP (W) Over Time by Type",
x = "Year",
y = "Average Transistor Density (million)",
color = "Average TDP (W)",
size = "Average Frequency (GHz)") +
guides(size = guide_legend("Average Frequency (GHz)")) +
theme_gray() +
theme(legend.position = "bottom",
legend.text = element_text(size = 14),
legend.title = element_text(size = 16))+
theme(plot.title = element_text(hjust = 0.5))
result7 <- data %>%
filter(`Frequency (GHz)` == 2.3 | `Frequency (GHz)` == 2.2) %>%
count(Year = as.numeric(format(`Release Date`, '%Y')), `Transistor Density`, Type, `TDP (W)`, `Frequency (GHz)`) %>%
group_by(Year, Type) %>%
summarize(
mean_transistor_density = mean(`Transistor Density`),
mean_TDP_W = mean(`TDP (W)`),
mean_frequency_GHz = mean(`Frequency (GHz)`)
)
ggplot(result7, aes(x = Year, y = mean_transistor_density/1000000, color = mean_TDP_W, size = mean_frequency_GHz)) +
geom_point(alpha = 0.7) +
facet_wrap(~Type) +
scale_color_gradient(low = "blue", high = "red", guide = guide_legend(override.aes = list(size = 5))) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Average Transistor Density, Frequency (GHz) and TDP (W) Over Time by Type",
x = "Year",
y = "Average Transistor Density (million)",
color = "Average TDP (W)",
size = "Average Frequency (GHz)") +
guides(size = guide_legend("Average Frequency (GHz)")) +
theme_gray() +
theme(legend.position = "bottom",
legend.text = element_text(size = 10),
legend.title = element_text(size = 16))+
theme(plot.title = element_text(hjust = 0.5))
data_for_plot2 =  data %>% count(Type,Company,name="Count")
ggplot(data_for_plot2,aes(x=Company, y=Count,fill= Type),fill = Type) +
geom_text(aes(label = Count),position = position_dodge(1), vjust = -0.5, size = 3) +
geom_bar(position='dodge', stat="identity") +
scale_y_continuous(
breaks=c(500,1000,1500),labels=c(500,1000,1500)) +
scale_fill_manual(values=c("#ffa500", "#0a75ad"),labels = legend_labels)+
labs(title = "CPU and GPU Count between Companies") +
theme_classic() +
theme(legend.position = "right", plot.title = element_text(hjust = 1))
data$Year <- year(ymd(data$`Release Date`))
visualization_data1 <- data %>%
group_by(Year, Company, Type) %>%
summarize(Count = n(), .groups = 'drop')
my_colors1 <- c("AMD" = "#ff4d00", "ATI" = "#e10000", "Intel" = "#1f77b4","NVIDIA"="#2ca02c" ,"Other"="#660066")
ggplot(visualization_data1, aes(x = Year, y = Count, fill = Company)) +
geom_area() +
facet_wrap(~Type)+
scale_fill_manual(values = my_colors1) +
labs(title = "Distribution of Product Types by Company Over the Years",
x = "Year", y = "Number of Products Released") +
theme_minimal() + theme_gray()+ theme(plot.title = element_text(hjust = 1))
filtered_data <- data %>%
filter(Company %in% c("Intel", "NVIDIA", "AMD"))
visualization_data2 <- filtered_data %>%
group_by(Year, Company,Type) %>%
summarize(AvgFrequency = mean(`Frequency (GHz)`, na.rm = TRUE), .groups = 'drop')
my_colors2 <- c("AMD" = "#ff4d00","Intel" = "#1f77b4","NVIDIA"="#2ca02c")
ggplot(visualization_data2, aes(x = Year, y = AvgFrequency, color = Company)) +
geom_line() +
geom_point() +
scale_color_manual(values = my_colors2)+
facet_wrap(~Type)+
labs(title = "Average Frequency (GHz) Over the Years by Company",
x = "Year", y = "Average Frequency (GHz)") +
theme_minimal() +
theme(legend.position = "bottom")+theme_gray() +theme(plot.title = element_text(hjust = 1))
visualization_data3 <- filtered_data %>%
group_by(Year, Company,Type) %>%
summarize(AvgTransistorDensity = mean(`Transistor Density`/1000000, na.rm = TRUE), .groups = 'drop')
ggplot(visualization_data3, aes(x = Year, y = AvgTransistorDensity, color = Company)) +
geom_line() +
geom_point()+
scale_color_manual(values = my_colors2)+
facet_wrap(~Type)+
labs(title = "Average Transistor Density Over the Years by Company",
x = "Year", y = "Average Transistor Density (million)") +
theme_minimal() +
theme(legend.position = "bottom") + theme_gray() + theme(plot.title = element_text(hjust = 1))
